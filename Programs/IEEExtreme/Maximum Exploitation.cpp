#include <bits/stdc++.h>
using namespace std;

const int inf = 1e9;
const int N = 1010;

int R, C, X, Y;
int grid[N][N];
int prefDown[N][N]; // g(0, c) + ... + g(r-1, c) + g(r, c)
int sumXY[N][N]; // (pD(r, 0) - pD(r-X, 0)) + ... + (pD(r, c) - pD(r-X, c))
int sumYX[N][N]; // (pD(r, 0) - pD(r-Y, 0)) + ... + (pD(r, c) - pD(r-Y, c))
int bestUL[N][N];
int bestUR[N][N];
int bestDL[N][N];
int bestDR[N][N];

void print(string name, int a[N][N]) {
	cout << name << ":" << endl;
	for (int r = 0; r < R; ++r) {
		for (int c = 0; c < C; ++c) {
			cout << setw(2) << right;
			if (abs(a[r][c]) == inf) {
				cout << "x";
			} else {
				cout << a[r][c];
			}
			if (c + 1 < C) {
				cout << " ";
			}
		}
		cout << endl;
	}
}

// calc sum of rectangle with side lengths A and B if (r, c) is bottom right corner
void calcSumUpLeft(int arr[N][N], int A, int B) {
	for (int r = 0; r < R; ++r) {
		int sum = 0;
		for (int c = 0; c < C; ++c) {
			// part for this column
			sum += prefDown[r][c];
			if (r-A >= 0) sum -= prefDown[r-A][c];
			// subtract part B columns to the left
			if (c-B >= 0) {
				sum -= prefDown[r][c-B];
				if (r-A >= 0) sum += prefDown[r-A][c-B];
			}
			// store sum
			arr[r][c] = sum;
		}
	}
}

int main() {
	cin >> R >> C >> X >> Y;
	for (int r = 0; r < R; ++r) {
		for (int c = 0; c < C; ++c) {
			cin >> grid[r][c];
		}
	}
	for (int r = 0; r < R; ++r) {
		for (int c = 0; c < C; ++c) {
			prefDown[r][c] = grid[r][c];
			if (r > 0) prefDown[r][c] += prefDown[r-1][c];
		}
	}
	calcSumUpLeft(sumXY, X, Y);
	calcSumUpLeft(sumYX, Y, X);
	// up left
	for (int r = 0; r < R; ++r) {
		for (int c = 0; c < C; ++c) {
			int& res = bestUL[r][c];
			res = -inf;
			if (r - X + 1 >= 0 && c - Y + 1 >= 0) {
				res = max(res, sumXY[r][c]);
			}
			if (r - Y + 1 >= 0 && c - X + 1 >= 0) {
				res = max(res, sumYX[r][c]);
			}
			if (r > 0) res = max(res, bestUL[r-1][c]);
			if (c > 0) res = max(res, bestUL[r][c-1]);
			if (r > 0 && c > 0) res = max(res, bestUL[r-1][c-1]);
		}
	}
	// up right
	for (int r = 0; r < R; ++r) {
		for (int c = C-1; c >= 0; --c) {
			int& res = bestUR[r][c];
			res = -inf;
			if (r - X + 1 >= 0 && c + Y - 1 < C) {
				res = max(res, sumXY[r][c+Y-1]);
			}
			if (r - Y + 1 >= 0 && c + X - 1 < C) {
				res = max(res, sumYX[r][c+X-1]);
			}
			if (r > 0) res = max(res, bestUR[r-1][c]);
			if (c + 1 < C) res = max(res, bestUR[r][c+1]);
			if (r > 0 && c + 1 < C) res = max(res, bestUR[r-1][c+1]);
		}
	}
	// down left
	for (int r = R-1; r >= 0; --r) {
		for (int c = 0; c < C; ++c) {
			int& res = bestDL[r][c];
			res = -inf;
			if (r + X - 1 < R && c - Y + 1 >= 0) {
				res = max(res, sumXY[r+X-1][c]);
			}
			if (r + Y - 1 < R && c - X + 1 >= 0) {
				res = max(res, sumYX[r+Y-1][c]);
			}
			if (r + 1 < R) res = max(res, bestDL[r+1][c]);
			if (c > 0) res = max(res, bestDL[r][c-1]);
			if (r + 1 < R && c > 0) res = max(res, bestDL[r+1][c-1]);
		}
	}
	// down right
	for (int r = R-1; r >= 0; --r) {
		for (int c = C-1; c >= 0; --c) {
			int& res = bestDR[r][c];
			res = -inf;
			if (r + X - 1 < R && c + Y - 1 < C) {
				res = max(res, sumXY[r+X-1][c+Y-1]);
			}
			if (r + Y - 1 < R && c + X - 1 < C) {
				res = max(res, sumYX[r+Y-1][c+X-1]);
			}
			if (r + 1 < R) res = max(res, bestDR[r+1][c]);
			if (c + 1 < C) res = max(res, bestDR[r][c+1]);
			if (r + 1 < R && c + 1 < C) res = max(res, bestDR[r+1][c+1]);
		}
	}
	// ans
	int ans = 0;
	for (int r = 0; r < R; ++r) {
		for (int c = 0; c < C; ++c) {
			int res = bestUL[r][c];
			if (r+1 < R)
				res = max(res, bestUL[r][c] + bestDL[r+1][c]);
			if (c+1 < C)
				res = max(res, bestUL[r][c] + bestUR[r][c+1]);
			if (r+1 < R && c+1 < C)
				res = max(res, bestUL[r][c] + bestDR[r+1][c+1]);
			ans = max(ans, res);
		}
	}
	cout << ans << endl;
	// print("grid", grid);
	// print("prefDown", prefDown);
	// print("sumXY", sumXY);
	// print("sumYX", sumYX);
	// print("bestUL", bestUL);
}
